import os
import math
from PIL import Image


def load_common_colors(file_path):
    """ Load the common colors from the file generated by the previous step """
    common_colors = []
    with open(file_path, 'r') as f:
        for line in f:
            # Parse lines like 'Color: (R, G, B), Count: X'
            color = line.split('Color: ')[1].split(', Count:')[0].strip()
            color = tuple(map(int, color.strip('()').split(',')))
            common_colors.append(color)
    return common_colors


def color_distance(c1, c2):
    """ Calculate the Euclidean distance between two RGB colors """
    return math.sqrt(sum((a - b) ** 2 for a, b in zip(c1, c2)))


def blend_colors(original_color, closest_color, factor=0.5):
    """ Blend original color closer to the closest color by a given factor (default is 50% closer) """
    return tuple(
        int(orig + factor * (close - orig)) for orig, close in zip(original_color, closest_color)
    )


def closest_color(pixel_color, common_colors):
    """ Find the closest color in the common_colors list to pixel_color """
    closest = None
    min_distance = float('inf')

    for common_color in common_colors:
        distance = color_distance(pixel_color, common_color)
        if distance < min_distance:
            min_distance = distance
            closest = common_color

    return closest


def replace_colors_in_image(image_path, output_path, color_file, threshold):
    """ Replace colors in the image by blending them closer to the most similar colors from the list """
    # Load the common colors
    common_colors = load_common_colors(color_file)

    # Open the image
    with Image.open(image_path) as img:
        img = img.convert('RGB')
        pixels = img.load()  # Access the image's pixel data

        # Iterate through every pixel in the image
        for y in range(img.height):
            for x in range(img.width):
                original_color = pixels[x, y]

                # Get the closest color from the common colors
                closest = closest_color(original_color, common_colors)

                # Calculate the distance to see if the color should be changed
                if color_distance(original_color, closest) <= threshold:
                    # Blend the original color towards the closest color by 50%
                    new_color = blend_colors(original_color, closest, factor=0.5)
                    pixels[x, y] = new_color

        # Save the modified image
        img.save(output_path)
        print(f"Modified image saved as {output_path}")



# Example usage
image_path = 'saved_eccv16.png'  # Path to the original image
output_path = 'out_images/colortest.png'  # Path to save the modified image
color_file = 'palette/colors.txt'  # The color file generated by your previous script
threshold = 100  # Adjust the threshold value for color similarity

replace_colors_in_image(image_path, output_path, color_file, threshold)
